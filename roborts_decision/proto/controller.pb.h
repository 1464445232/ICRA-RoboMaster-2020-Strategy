// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: controller.proto

#ifndef PROTOBUF_controller_2eproto__INCLUDED
#define PROTOBUF_controller_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace roborts_decision {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_controller_2eproto();
void protobuf_AssignDesc_controller_2eproto();
void protobuf_ShutdownFile_controller_2eproto();

class PID_Controller;
class ControllerConfig;

// ===================================================================

class PID_Controller : public ::google::protobuf::Message {
 public:
  PID_Controller();
  virtual ~PID_Controller();

  PID_Controller(const PID_Controller& from);

  inline PID_Controller& operator=(const PID_Controller& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PID_Controller& default_instance();

  void Swap(PID_Controller* other);

  // implements Message ----------------------------------------------

  PID_Controller* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PID_Controller& from);
  void MergeFrom(const PID_Controller& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float chassis_p = 1;
  inline bool has_chassis_p() const;
  inline void clear_chassis_p();
  static const int kChassisPFieldNumber = 1;
  inline float chassis_p() const;
  inline void set_chassis_p(float value);

  // optional float chassis_i = 2;
  inline bool has_chassis_i() const;
  inline void clear_chassis_i();
  static const int kChassisIFieldNumber = 2;
  inline float chassis_i() const;
  inline void set_chassis_i(float value);

  // optional float chassis_d = 3;
  inline bool has_chassis_d() const;
  inline void clear_chassis_d();
  static const int kChassisDFieldNumber = 3;
  inline float chassis_d() const;
  inline void set_chassis_d(float value);

  // optional bool chassis_has_threshold = 4 [default = false];
  inline bool has_chassis_has_threshold() const;
  inline void clear_chassis_has_threshold();
  static const int kChassisHasThresholdFieldNumber = 4;
  inline bool chassis_has_threshold() const;
  inline void set_chassis_has_threshold(bool value);

  // optional float chassis_threshold = 5;
  inline bool has_chassis_threshold() const;
  inline void clear_chassis_threshold();
  static const int kChassisThresholdFieldNumber = 5;
  inline float chassis_threshold() const;
  inline void set_chassis_threshold(float value);

  // @@protoc_insertion_point(class_scope:roborts_decision.PID_Controller)
 private:
  inline void set_has_chassis_p();
  inline void clear_has_chassis_p();
  inline void set_has_chassis_i();
  inline void clear_has_chassis_i();
  inline void set_has_chassis_d();
  inline void clear_has_chassis_d();
  inline void set_has_chassis_has_threshold();
  inline void clear_has_chassis_has_threshold();
  inline void set_has_chassis_threshold();
  inline void clear_has_chassis_threshold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float chassis_p_;
  float chassis_i_;
  float chassis_d_;
  bool chassis_has_threshold_;
  float chassis_threshold_;
  friend void  protobuf_AddDesc_controller_2eproto();
  friend void protobuf_AssignDesc_controller_2eproto();
  friend void protobuf_ShutdownFile_controller_2eproto();

  void InitAsDefaultInstance();
  static PID_Controller* default_instance_;
};
// -------------------------------------------------------------------

class ControllerConfig : public ::google::protobuf::Message {
 public:
  ControllerConfig();
  virtual ~ControllerConfig();

  ControllerConfig(const ControllerConfig& from);

  inline ControllerConfig& operator=(const ControllerConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ControllerConfig& default_instance();

  void Swap(ControllerConfig* other);

  // implements Message ----------------------------------------------

  ControllerConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ControllerConfig& from);
  void MergeFrom(const ControllerConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .roborts_decision.PID_Controller pid_controller = 1;
  inline bool has_pid_controller() const;
  inline void clear_pid_controller();
  static const int kPidControllerFieldNumber = 1;
  inline const ::roborts_decision::PID_Controller& pid_controller() const;
  inline ::roborts_decision::PID_Controller* mutable_pid_controller();
  inline ::roborts_decision::PID_Controller* release_pid_controller();
  inline void set_allocated_pid_controller(::roborts_decision::PID_Controller* pid_controller);

  // @@protoc_insertion_point(class_scope:roborts_decision.ControllerConfig)
 private:
  inline void set_has_pid_controller();
  inline void clear_has_pid_controller();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::roborts_decision::PID_Controller* pid_controller_;
  friend void  protobuf_AddDesc_controller_2eproto();
  friend void protobuf_AssignDesc_controller_2eproto();
  friend void protobuf_ShutdownFile_controller_2eproto();

  void InitAsDefaultInstance();
  static ControllerConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// PID_Controller

// optional float chassis_p = 1;
inline bool PID_Controller::has_chassis_p() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PID_Controller::set_has_chassis_p() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PID_Controller::clear_has_chassis_p() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PID_Controller::clear_chassis_p() {
  chassis_p_ = 0;
  clear_has_chassis_p();
}
inline float PID_Controller::chassis_p() const {
  // @@protoc_insertion_point(field_get:roborts_decision.PID_Controller.chassis_p)
  return chassis_p_;
}
inline void PID_Controller::set_chassis_p(float value) {
  set_has_chassis_p();
  chassis_p_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.PID_Controller.chassis_p)
}

// optional float chassis_i = 2;
inline bool PID_Controller::has_chassis_i() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PID_Controller::set_has_chassis_i() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PID_Controller::clear_has_chassis_i() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PID_Controller::clear_chassis_i() {
  chassis_i_ = 0;
  clear_has_chassis_i();
}
inline float PID_Controller::chassis_i() const {
  // @@protoc_insertion_point(field_get:roborts_decision.PID_Controller.chassis_i)
  return chassis_i_;
}
inline void PID_Controller::set_chassis_i(float value) {
  set_has_chassis_i();
  chassis_i_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.PID_Controller.chassis_i)
}

// optional float chassis_d = 3;
inline bool PID_Controller::has_chassis_d() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PID_Controller::set_has_chassis_d() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PID_Controller::clear_has_chassis_d() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PID_Controller::clear_chassis_d() {
  chassis_d_ = 0;
  clear_has_chassis_d();
}
inline float PID_Controller::chassis_d() const {
  // @@protoc_insertion_point(field_get:roborts_decision.PID_Controller.chassis_d)
  return chassis_d_;
}
inline void PID_Controller::set_chassis_d(float value) {
  set_has_chassis_d();
  chassis_d_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.PID_Controller.chassis_d)
}

// optional bool chassis_has_threshold = 4 [default = false];
inline bool PID_Controller::has_chassis_has_threshold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PID_Controller::set_has_chassis_has_threshold() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PID_Controller::clear_has_chassis_has_threshold() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PID_Controller::clear_chassis_has_threshold() {
  chassis_has_threshold_ = false;
  clear_has_chassis_has_threshold();
}
inline bool PID_Controller::chassis_has_threshold() const {
  // @@protoc_insertion_point(field_get:roborts_decision.PID_Controller.chassis_has_threshold)
  return chassis_has_threshold_;
}
inline void PID_Controller::set_chassis_has_threshold(bool value) {
  set_has_chassis_has_threshold();
  chassis_has_threshold_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.PID_Controller.chassis_has_threshold)
}

// optional float chassis_threshold = 5;
inline bool PID_Controller::has_chassis_threshold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PID_Controller::set_has_chassis_threshold() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PID_Controller::clear_has_chassis_threshold() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PID_Controller::clear_chassis_threshold() {
  chassis_threshold_ = 0;
  clear_has_chassis_threshold();
}
inline float PID_Controller::chassis_threshold() const {
  // @@protoc_insertion_point(field_get:roborts_decision.PID_Controller.chassis_threshold)
  return chassis_threshold_;
}
inline void PID_Controller::set_chassis_threshold(float value) {
  set_has_chassis_threshold();
  chassis_threshold_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.PID_Controller.chassis_threshold)
}

// -------------------------------------------------------------------

// ControllerConfig

// optional .roborts_decision.PID_Controller pid_controller = 1;
inline bool ControllerConfig::has_pid_controller() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ControllerConfig::set_has_pid_controller() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ControllerConfig::clear_has_pid_controller() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ControllerConfig::clear_pid_controller() {
  if (pid_controller_ != NULL) pid_controller_->::roborts_decision::PID_Controller::Clear();
  clear_has_pid_controller();
}
inline const ::roborts_decision::PID_Controller& ControllerConfig::pid_controller() const {
  // @@protoc_insertion_point(field_get:roborts_decision.ControllerConfig.pid_controller)
  return pid_controller_ != NULL ? *pid_controller_ : *default_instance_->pid_controller_;
}
inline ::roborts_decision::PID_Controller* ControllerConfig::mutable_pid_controller() {
  set_has_pid_controller();
  if (pid_controller_ == NULL) pid_controller_ = new ::roborts_decision::PID_Controller;
  // @@protoc_insertion_point(field_mutable:roborts_decision.ControllerConfig.pid_controller)
  return pid_controller_;
}
inline ::roborts_decision::PID_Controller* ControllerConfig::release_pid_controller() {
  clear_has_pid_controller();
  ::roborts_decision::PID_Controller* temp = pid_controller_;
  pid_controller_ = NULL;
  return temp;
}
inline void ControllerConfig::set_allocated_pid_controller(::roborts_decision::PID_Controller* pid_controller) {
  delete pid_controller_;
  pid_controller_ = pid_controller;
  if (pid_controller) {
    set_has_pid_controller();
  } else {
    clear_has_pid_controller();
  }
  // @@protoc_insertion_point(field_set_allocated:roborts_decision.ControllerConfig.pid_controller)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace roborts_decision

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_controller_2eproto__INCLUDED
