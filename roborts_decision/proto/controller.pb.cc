// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: controller.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "controller.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace roborts_decision {

namespace {

const ::google::protobuf::Descriptor* PID_Controller_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PID_Controller_reflection_ = NULL;
const ::google::protobuf::Descriptor* ControllerConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ControllerConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_controller_2eproto() {
  protobuf_AddDesc_controller_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "controller.proto");
  GOOGLE_CHECK(file != NULL);
  PID_Controller_descriptor_ = file->message_type(0);
  static const int PID_Controller_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PID_Controller, chassis_p_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PID_Controller, chassis_i_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PID_Controller, chassis_d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PID_Controller, chassis_has_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PID_Controller, chassis_threshold_),
  };
  PID_Controller_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PID_Controller_descriptor_,
      PID_Controller::default_instance_,
      PID_Controller_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PID_Controller, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PID_Controller, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PID_Controller));
  ControllerConfig_descriptor_ = file->message_type(1);
  static const int ControllerConfig_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerConfig, pid_controller_),
  };
  ControllerConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ControllerConfig_descriptor_,
      ControllerConfig::default_instance_,
      ControllerConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ControllerConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_controller_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PID_Controller_descriptor_, &PID_Controller::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ControllerConfig_descriptor_, &ControllerConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_controller_2eproto() {
  delete PID_Controller::default_instance_;
  delete PID_Controller_reflection_;
  delete ControllerConfig::default_instance_;
  delete ControllerConfig_reflection_;
}

void protobuf_AddDesc_controller_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020controller.proto\022\020roborts_decision\"\212\001\n"
    "\016PID_Controller\022\021\n\tchassis_p\030\001 \001(\002\022\021\n\tch"
    "assis_i\030\002 \001(\002\022\021\n\tchassis_d\030\003 \001(\002\022$\n\025chas"
    "sis_has_threshold\030\004 \001(\010:\005false\022\031\n\021chassi"
    "s_threshold\030\005 \001(\002\"L\n\020ControllerConfig\0228\n"
    "\016pid_controller\030\001 \001(\0132 .roborts_decision"
    ".PID_Controller", 255);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "controller.proto", &protobuf_RegisterTypes);
  PID_Controller::default_instance_ = new PID_Controller();
  ControllerConfig::default_instance_ = new ControllerConfig();
  PID_Controller::default_instance_->InitAsDefaultInstance();
  ControllerConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_controller_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_controller_2eproto {
  StaticDescriptorInitializer_controller_2eproto() {
    protobuf_AddDesc_controller_2eproto();
  }
} static_descriptor_initializer_controller_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PID_Controller::kChassisPFieldNumber;
const int PID_Controller::kChassisIFieldNumber;
const int PID_Controller::kChassisDFieldNumber;
const int PID_Controller::kChassisHasThresholdFieldNumber;
const int PID_Controller::kChassisThresholdFieldNumber;
#endif  // !_MSC_VER

PID_Controller::PID_Controller()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_decision.PID_Controller)
}

void PID_Controller::InitAsDefaultInstance() {
}

PID_Controller::PID_Controller(const PID_Controller& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:roborts_decision.PID_Controller)
}

void PID_Controller::SharedCtor() {
  _cached_size_ = 0;
  chassis_p_ = 0;
  chassis_i_ = 0;
  chassis_d_ = 0;
  chassis_has_threshold_ = false;
  chassis_threshold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PID_Controller::~PID_Controller() {
  // @@protoc_insertion_point(destructor:roborts_decision.PID_Controller)
  SharedDtor();
}

void PID_Controller::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PID_Controller::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PID_Controller::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PID_Controller_descriptor_;
}

const PID_Controller& PID_Controller::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_controller_2eproto();
  return *default_instance_;
}

PID_Controller* PID_Controller::default_instance_ = NULL;

PID_Controller* PID_Controller::New() const {
  return new PID_Controller;
}

void PID_Controller::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PID_Controller*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(chassis_p_, chassis_threshold_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PID_Controller::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_decision.PID_Controller)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float chassis_p = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &chassis_p_)));
          set_has_chassis_p();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_chassis_i;
        break;
      }

      // optional float chassis_i = 2;
      case 2: {
        if (tag == 21) {
         parse_chassis_i:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &chassis_i_)));
          set_has_chassis_i();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_chassis_d;
        break;
      }

      // optional float chassis_d = 3;
      case 3: {
        if (tag == 29) {
         parse_chassis_d:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &chassis_d_)));
          set_has_chassis_d();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_chassis_has_threshold;
        break;
      }

      // optional bool chassis_has_threshold = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_chassis_has_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &chassis_has_threshold_)));
          set_has_chassis_has_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_chassis_threshold;
        break;
      }

      // optional float chassis_threshold = 5;
      case 5: {
        if (tag == 45) {
         parse_chassis_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &chassis_threshold_)));
          set_has_chassis_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_decision.PID_Controller)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_decision.PID_Controller)
  return false;
#undef DO_
}

void PID_Controller::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_decision.PID_Controller)
  // optional float chassis_p = 1;
  if (has_chassis_p()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->chassis_p(), output);
  }

  // optional float chassis_i = 2;
  if (has_chassis_i()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->chassis_i(), output);
  }

  // optional float chassis_d = 3;
  if (has_chassis_d()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->chassis_d(), output);
  }

  // optional bool chassis_has_threshold = 4 [default = false];
  if (has_chassis_has_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->chassis_has_threshold(), output);
  }

  // optional float chassis_threshold = 5;
  if (has_chassis_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->chassis_threshold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_decision.PID_Controller)
}

::google::protobuf::uint8* PID_Controller::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_decision.PID_Controller)
  // optional float chassis_p = 1;
  if (has_chassis_p()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->chassis_p(), target);
  }

  // optional float chassis_i = 2;
  if (has_chassis_i()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->chassis_i(), target);
  }

  // optional float chassis_d = 3;
  if (has_chassis_d()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->chassis_d(), target);
  }

  // optional bool chassis_has_threshold = 4 [default = false];
  if (has_chassis_has_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->chassis_has_threshold(), target);
  }

  // optional float chassis_threshold = 5;
  if (has_chassis_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->chassis_threshold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_decision.PID_Controller)
  return target;
}

int PID_Controller::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float chassis_p = 1;
    if (has_chassis_p()) {
      total_size += 1 + 4;
    }

    // optional float chassis_i = 2;
    if (has_chassis_i()) {
      total_size += 1 + 4;
    }

    // optional float chassis_d = 3;
    if (has_chassis_d()) {
      total_size += 1 + 4;
    }

    // optional bool chassis_has_threshold = 4 [default = false];
    if (has_chassis_has_threshold()) {
      total_size += 1 + 1;
    }

    // optional float chassis_threshold = 5;
    if (has_chassis_threshold()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PID_Controller::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PID_Controller* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PID_Controller*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PID_Controller::MergeFrom(const PID_Controller& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chassis_p()) {
      set_chassis_p(from.chassis_p());
    }
    if (from.has_chassis_i()) {
      set_chassis_i(from.chassis_i());
    }
    if (from.has_chassis_d()) {
      set_chassis_d(from.chassis_d());
    }
    if (from.has_chassis_has_threshold()) {
      set_chassis_has_threshold(from.chassis_has_threshold());
    }
    if (from.has_chassis_threshold()) {
      set_chassis_threshold(from.chassis_threshold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PID_Controller::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PID_Controller::CopyFrom(const PID_Controller& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PID_Controller::IsInitialized() const {

  return true;
}

void PID_Controller::Swap(PID_Controller* other) {
  if (other != this) {
    std::swap(chassis_p_, other->chassis_p_);
    std::swap(chassis_i_, other->chassis_i_);
    std::swap(chassis_d_, other->chassis_d_);
    std::swap(chassis_has_threshold_, other->chassis_has_threshold_);
    std::swap(chassis_threshold_, other->chassis_threshold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PID_Controller::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PID_Controller_descriptor_;
  metadata.reflection = PID_Controller_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ControllerConfig::kPidControllerFieldNumber;
#endif  // !_MSC_VER

ControllerConfig::ControllerConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_decision.ControllerConfig)
}

void ControllerConfig::InitAsDefaultInstance() {
  pid_controller_ = const_cast< ::roborts_decision::PID_Controller*>(&::roborts_decision::PID_Controller::default_instance());
}

ControllerConfig::ControllerConfig(const ControllerConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:roborts_decision.ControllerConfig)
}

void ControllerConfig::SharedCtor() {
  _cached_size_ = 0;
  pid_controller_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ControllerConfig::~ControllerConfig() {
  // @@protoc_insertion_point(destructor:roborts_decision.ControllerConfig)
  SharedDtor();
}

void ControllerConfig::SharedDtor() {
  if (this != default_instance_) {
    delete pid_controller_;
  }
}

void ControllerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ControllerConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ControllerConfig_descriptor_;
}

const ControllerConfig& ControllerConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_controller_2eproto();
  return *default_instance_;
}

ControllerConfig* ControllerConfig::default_instance_ = NULL;

ControllerConfig* ControllerConfig::New() const {
  return new ControllerConfig;
}

void ControllerConfig::Clear() {
  if (has_pid_controller()) {
    if (pid_controller_ != NULL) pid_controller_->::roborts_decision::PID_Controller::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ControllerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_decision.ControllerConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .roborts_decision.PID_Controller pid_controller = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pid_controller()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_decision.ControllerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_decision.ControllerConfig)
  return false;
#undef DO_
}

void ControllerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_decision.ControllerConfig)
  // optional .roborts_decision.PID_Controller pid_controller = 1;
  if (has_pid_controller()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pid_controller(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_decision.ControllerConfig)
}

::google::protobuf::uint8* ControllerConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_decision.ControllerConfig)
  // optional .roborts_decision.PID_Controller pid_controller = 1;
  if (has_pid_controller()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pid_controller(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_decision.ControllerConfig)
  return target;
}

int ControllerConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .roborts_decision.PID_Controller pid_controller = 1;
    if (has_pid_controller()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pid_controller());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ControllerConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ControllerConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ControllerConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ControllerConfig::MergeFrom(const ControllerConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid_controller()) {
      mutable_pid_controller()->::roborts_decision::PID_Controller::MergeFrom(from.pid_controller());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ControllerConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerConfig::CopyFrom(const ControllerConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerConfig::IsInitialized() const {

  return true;
}

void ControllerConfig::Swap(ControllerConfig* other) {
  if (other != this) {
    std::swap(pid_controller_, other->pid_controller_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ControllerConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ControllerConfig_descriptor_;
  metadata.reflection = ControllerConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace roborts_decision

// @@protoc_insertion_point(global_scope)
